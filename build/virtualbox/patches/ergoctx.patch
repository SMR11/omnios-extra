
Following the integration of

	13917 ctxops interfaces could be more ergonomic
	https://www.illumos.org/issues/13917

virtualbox needs to use the new ctx management functions.

13917 was integrated to r151041 so the previous behaviour code must be retained
for prior releases.

diff -wpruN '--exclude=*.orig' a~/src/VBox/Runtime/r0drv/solaris/initterm-r0drv-solaris.c a/src/VBox/Runtime/r0drv/solaris/initterm-r0drv-solaris.c
--- a~/src/VBox/Runtime/r0drv/solaris/initterm-r0drv-solaris.c	1970-01-01 00:00:00
+++ a/src/VBox/Runtime/r0drv/solaris/initterm-r0drv-solaris.c	1970-01-01 00:00:00
@@ -223,6 +223,7 @@ DECLHIDDEN(int) rtR0InitNative(void)
         /*
          * Mandatory: Thread-context hooks.
          */
+#if OOCEVER < 151041
         rc = RTR0DbgKrnlInfoQuerySymbol(g_hKrnlDbgInfo, NULL /* pszModule */, "installctx_preallocate",  NULL /* ppvSymbol */);
         if (RT_SUCCESS(rc))
         {
@@ -245,6 +246,7 @@ DECLHIDDEN(int) rtR0InitNative(void)
             g_rtSolThreadCtx.Remove.pfnSol_removectx_old   = (void *)removectx;
         }
         }
+#endif
 
         /*
          * Mandatory: map_addr() hooks.
diff -wpruN '--exclude=*.orig' a~/src/VBox/Runtime/r0drv/solaris/threadctxhooks-r0drv-solaris.c a/src/VBox/Runtime/r0drv/solaris/threadctxhooks-r0drv-solaris.c
--- a~/src/VBox/Runtime/r0drv/solaris/threadctxhooks-r0drv-solaris.c	1970-01-01 00:00:00
+++ a/src/VBox/Runtime/r0drv/solaris/threadctxhooks-r0drv-solaris.c	1970-01-01 00:00:00
@@ -163,6 +163,14 @@ static void rtThreadCtxHookSolFree(void
     }
 }
 
+#if OOCEVER >= 151041
+static const struct ctxop_template vbox_ctxop_tpl = {
+	.ct_rev		= CTXOP_TPL_REV,
+	.ct_save	= rtThreadCtxHookSolOut,
+	.ct_restore	= rtThreadCtxHookSolIn,
+	.ct_free	= rtThreadCtxHookSolFree
+};
+#endif
 
 RTDECL(int) RTThreadCtxHookCreate(PRTTHREADCTXHOOK phCtxHook, uint32_t fFlags, PFNRTTHREADCTXHOOK pfnCallback, void *pvUser)
 {
@@ -192,6 +200,9 @@ RTDECL(int) RTThreadCtxHookCreate(PRTTHR
      * with preemption disabled. We allocate the context-hooks here and use 'fEnabled' to determine if we can
      * invoke the consumer's hook or not.
      */
+#if OOCEVER >= 151041
+    ctxop_install(curthread, &vbox_ctxop_tpl, pThis);
+#else
     if (g_frtillumosNewThreadCtx)
     {
         g_rtSolThreadCtx.Install.pfnillumos_installctx(curthread,
@@ -225,6 +236,7 @@ RTDECL(int) RTThreadCtxHookCreate(PRTTHR
                                                    NULL,                        /* exit */
                                                    rtThreadCtxHookSolFree);
     }
+#endif
 
     *phCtxHook = pThis;
     return VINF_SUCCESS;
@@ -266,6 +278,9 @@ RTDECL(int) RTThreadCtxHookDestroy(RTTHR
          * ring-0 thread dies, Solaris will call rtThreadCtxHookSolFree() which will free the hook object.
          */
         int rc;
+#if OOCEVER >= 151041
+	rc = ctxop_remove(curthread, &vbox_ctxop_tpl, pThis);
+#else
         if (g_frtillumosNewThreadCtx)
         {
             rc = g_rtSolThreadCtx.Remove.pfnillumos_removectx(curthread,
@@ -298,6 +313,7 @@ RTDECL(int) RTThreadCtxHookDestroy(RTTHR
                                                           NULL,                         /* exit */
                                                           rtThreadCtxHookSolFree);
         }
+#endif
         AssertMsg(rc, ("removectx() failed. rc=%d\n", rc));
         NOREF(rc);
 
