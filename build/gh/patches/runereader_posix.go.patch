diff -wpruN --no-dereference '--exclude=*.orig' a~/_deps/pkg/mod/github.com/!alec!aivazis/survey/v2@v2.3.7/terminal/runereader_posix.go a/_deps/pkg/mod/github.com/!alec!aivazis/survey/v2@v2.3.7/terminal/runereader_posix.go
--- a~/_deps/pkg/mod/github.com/!alec!aivazis/survey/v2@v2.3.7/terminal/runereader_posix.go	1970-01-01 00:00:00
+++ a/_deps/pkg/mod/github.com/!alec!aivazis/survey/v2@v2.3.7/terminal/runereader_posix.go	1970-01-01 00:00:00
@@ -13,8 +13,7 @@ import (
 	"bufio"
 	"bytes"
 	"fmt"
-	"syscall"
-	"unsafe"
+	"golang.org/x/sys/unix"
 )
 
 const (
@@ -23,7 +22,7 @@ const (
 )
 
 type runeReaderState struct {
-	term   syscall.Termios
+	term   unix.Termios
 	reader *bufio.Reader
 	buf    *bytes.Buffer
 }
@@ -45,19 +44,20 @@ func (rr *RuneReader) Buffer() *bytes.Bu
 
 // For reading runes we just want to disable echo.
 func (rr *RuneReader) SetTermMode() error {
-	if _, _, err := syscall.Syscall6(syscall.SYS_IOCTL, uintptr(rr.stdio.In.Fd()), ioctlReadTermios, uintptr(unsafe.Pointer(&rr.state.term)), 0, 0, 0); err != 0 {
+	termios, err := unix.IoctlGetTermios(int(rr.stdio.In.Fd()), unix.TCGETS)
+	if err != nil {
 		return err
 	}
 
-	newState := rr.state.term
-	newState.Lflag &^= syscall.ECHO | syscall.ECHONL | syscall.ICANON | syscall.ISIG
+	rr.state.term = *termios
+	termios.Lflag &^= unix.ECHO | unix.ECHONL | unix.ICANON | unix.ISIG
 	// Because we are clearing canonical mode, we need to ensure VMIN & VTIME are
 	// set to the values we expect. This combination puts things in standard
 	// "blocking read" mode (see termios(3)).
-	newState.Cc[syscall.VMIN] = 1
-	newState.Cc[syscall.VTIME] = 0
+	termios.Cc[unix.VMIN] = 1
+	termios.Cc[unix.VTIME] = 0
 
-	if _, _, err := syscall.Syscall6(syscall.SYS_IOCTL, uintptr(rr.stdio.In.Fd()), ioctlWriteTermios, uintptr(unsafe.Pointer(&newState)), 0, 0, 0); err != 0 {
+	if err := unix.IoctlSetTermios(int(rr.stdio.In.Fd()), unix.TCSETS, termios); err != nil {
 		return err
 	}
 
@@ -65,7 +65,7 @@ func (rr *RuneReader) SetTermMode() erro
 }
 
 func (rr *RuneReader) RestoreTermMode() error {
-	if _, _, err := syscall.Syscall6(syscall.SYS_IOCTL, uintptr(rr.stdio.In.Fd()), ioctlWriteTermios, uintptr(unsafe.Pointer(&rr.state.term)), 0, 0, 0); err != 0 {
+	if err := unix.IoctlSetTermios(int(rr.stdio.In.Fd()), unix.TCSETS, &rr.state.term); err != nil {
 		return err
 	}
 	return nil
