
Reported upstream at https://github.com/libuv/libuv/pull/3542

diff -wpruN '--exclude=*.orig' a~/deps/uv/src/unix/core.c a/deps/uv/src/unix/core.c
--- a~/deps/uv/src/unix/core.c	1970-01-01 00:00:00
+++ a/deps/uv/src/unix/core.c	1970-01-01 00:00:00
@@ -158,6 +158,15 @@ void uv_close(uv_handle_t* handle, uv_cl
 
   case UV_FS_EVENT:
     uv__fs_event_close((uv_fs_event_t*)handle);
+#if defined(__sun)
+    /*
+     * On Solaris and illumos, we will not be able to dissociate the watcher
+     * for an event which is pending delivery, so we cannot always call
+     * uv__make_close_pending() straight away. The backend will call the
+     * function once the event has cleared.
+     */
+    return;
+#endif
     break;
 
   case UV_POLL:
diff -wpruN '--exclude=*.orig' a~/deps/uv/src/unix/sunos.c a/deps/uv/src/unix/sunos.c
--- a~/deps/uv/src/unix/sunos.c	1970-01-01 00:00:00
+++ a/deps/uv/src/unix/sunos.c	1970-01-01 00:00:00
@@ -154,7 +154,6 @@ void uv__io_poll(uv_loop_t* loop, int ti
   sigset_t set;
   uint64_t base;
   uint64_t diff;
-  uint64_t idle_poll;
   unsigned int nfds;
   unsigned int i;
   int saved_errno;
@@ -424,7 +423,7 @@ void uv_loadavg(double avg[3]) {
 #if defined(PORT_SOURCE_FILE)
 
 static int uv__fs_event_rearm(uv_fs_event_t *handle) {
-  if (handle->fd == -1)
+  if (handle->fd == PORT_DELETED)
     return UV_EBADF;
 
   if (port_associate(handle->loop->fs_fd,
@@ -475,6 +474,11 @@ static void uv__fs_event_read(uv_loop_t*
     handle = (uv_fs_event_t*) pe.portev_user;
     assert((r == 0) && "unexpected port_get() error");
 
+    if (uv__is_closing(handle)) {
+      uv__make_close_pending((uv_handle_t*) handle);
+      break;
+    }
+
     events = 0;
     if (pe.portev_events & (FILE_ATTRIB | FILE_MODIFIED))
       events |= UV_CHANGE;
@@ -543,11 +547,20 @@ int uv_fs_event_start(uv_fs_event_t* han
 
 
 int uv_fs_event_stop(uv_fs_event_t* handle) {
+  int ret = 0;
+
   if (!uv__is_active(handle))
     return 0;
 
-  if (handle->fd == PORT_FIRED || handle->fd == PORT_LOADED) {
-    port_dissociate(handle->loop->fs_fd,
+  if (handle->fd == PORT_LOADED) {
+    /*
+     * If we are unable to dissociate the port here, then it is most likely
+     * that there is a pending queued event. When this happens, we don't want
+     * to complete the close as it will free the underlying memory for the
+     * handle, causing a use-after-free problem when the event is processed.
+     * We defer the final cleanup until after we see the event.
+     */
+    ret = port_dissociate(handle->loop->fs_fd,
                     PORT_SOURCE_FILE,
                     (uintptr_t) &handle->fo);
   }
@@ -558,11 +571,12 @@ int uv_fs_event_stop(uv_fs_event_t* hand
   handle->fo.fo_name = NULL;
   uv__handle_stop(handle);
 
-  return 0;
+  return ret;
 }
 
 void uv__fs_event_close(uv_fs_event_t* handle) {
-  uv_fs_event_stop(handle);
+  if (uv_fs_event_stop(handle) == 0)
+    uv__make_close_pending((uv_handle_t*) handle);
 }
 
 #else /* !defined(PORT_SOURCE_FILE) */
